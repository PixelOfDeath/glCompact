#pragma once
#include "glCompact/gl/Types.hpp"
#include "glCompact/gl/Constants.hpp"

namespace glCompact {
    namespace gl {
        //OpenGL uses stdcall, but msvc default is cdecl
        #if defined(_WIN32)
            #define EXTERNC
            #define STDCALL __stdcall
        #else
            //GCC
            #define EXTERNC extern "C"
            #define STDCALL
        #endif

        typedef void (STDCALL *GLDEBUGPROC)   (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *message, const void *userParam);
        typedef void (STDCALL *GLDEBUGPROCARB)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *message, const void *userParam);
        typedef void (STDCALL *GLDEBUGPROCKHR)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *message, const void *userParam);
        typedef void (STDCALL *GLDEBUGPROCAMD)(GLuint id, GLenum category, GLenum severity, GLsizei length, const GLchar *message, void *userParam);

        //Part of GL_EXT_external_buffer (GLeglClientBufferEXT is an opaque handle to an EGLClientBuffer)
        typedef void *GLeglClientBufferEXT;

        //part of GL_NV_draw_vulkan_image
        typedef void (STDCALL *GLVULKANPROCNV)(void);

        //EXTERNC typedef RETURNVALUE  (STDCALL *glNamePROC)(PARAM);
        ///FUNCTION_TYPEDEF_LIST

        #undef EXTERNC
        #undef STDCALL
    }
}
