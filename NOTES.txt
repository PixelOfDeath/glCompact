NOTES:
- find that specific g++ constructor inherence bug and detect it in CMake to warn about it (Bug only visible in usage of library, not during building)
- remove atomic counter buffers? They seem to be a historic artefact whos limitations performance adventages have vanished from hardware.
- add debug test if any pipeline is used with undefined (deleted but still set buffer/surface) source object
- Occlusion culling
- conditional rendering
- transform feedback
- remove any internal catch, so anyone can switch throw into instand crash without breaking the library internals
- change all "undefined" integers to int32_t/uint32_t... etc.
- clean up shader information structs
- enforce enabeling of all used extensions (and GL version), to create easily testable version dependency like in Vulkan

Maybe way later:
- GLES (at last GLES2) does not support any surface memory conversion when up-/downloading data to/from textures?
  Fallback to the lowest support or maybe implement conversion in the library?
- What is with load image files intigration?
- Camera class? Or is GLM enough? Make a "glCompactTool" library on top of glCompact? (perspective(), lookAt(), etc...)
- __restrict optimisation
- make gl pointer getter function __attribute__ ((pure)) on compilers that support it
- remove const from classes because of hidden move/copy issues.
